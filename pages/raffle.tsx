import type { NextPage } from 'next'

/* React */
import React, { useState, useEffect } from 'react'

/* Components */
import Head from 'next/head'
import styles from '../styles/Raffle.module.css'

/* Redux */
import { 
  setReduxParticipants,
} from "../redux/actions"
import { selectParticipants } from "../redux/states/participants/reducer"
import { useAppSelector, useAppDispatch } from '../redux/hooks'
import { Participant } from '../redux/states/participants/interfaces'

/* Material UI */
import IconButton from '@mui/material/IconButton';
import Tooltip from '@mui/material/Tooltip';
import PersonRoundedIcon from '@mui/icons-material/PersonRounded';
import ReplayCircleFilledRoundedIcon from '@mui/icons-material/ReplayCircleFilledRounded';

/* Papaparse */
import Papa from "papaparse";


const Raffle: NextPage = () => {

    /* useState - upload */
    const [state, setState] = useState({
        winnerStatus: 0,
        winnerFolio: "",
    });

    const [name, setName] = useState<string>("--");
    const [folio, setFolio] = useState<string>("--");

    const [intervalID, setIntervalID] = useState<number>(0);

    /* Redux */
    const dispatch = useAppDispatch(); //function that allows to trigger actions that update the redux state
    const participants = useAppSelector(selectParticipants) //function that allows to get the Participants from the redux state


    /* Shuffle array */
    function shuffle(array: []) {
        let currentIndex = array.length,  randomIndex;

        // While there remain elements to shuffle.
        while (currentIndex != 0) {

            // Pick a remaining element.
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex--;

            // And swap it with the current element.
            [array[currentIndex], array[randomIndex]] = [
            array[randomIndex], array[currentIndex]];
        }

        return array;
    }

    

    useEffect(() => {

        if (participants.length > 0) {
            let index = 0;
            let num = 0;

            let temp: Participant[] = shuffle(participants);

            const interval: any = setInterval(() => {
                if(num === 10) {
                    clearInterval(intervalID);
                    setState({...state, winnerStatus: 1, winnerFolio: temp[index].folio});
                } else if(index < (participants.length-2)) {
                    console.log('numParticipants: ', num);
                    index = index + 1;
                    setName(temp[index].nombre);
                    setFolio(temp[index].folio);
                } else {
                    num = num + 1;
                    index = index + 1;
                    setName(temp[index].nombre);
                    setFolio(temp[index].folio);
                    index = 0;
                }

            }, 10)

            setIntervalID(interval);
       
        }

    } ,[]);

    const handleReplayClick = () => {
        //delete winner from participants
        //let temp = participants.filter(participant => participant.folio !== state.winnerFolio);
    }
  
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {/* outer circle */}
        <div className={styles.outer__circle}>
            <div className={styles.ball}></div>
        </div>

        {/* inner circle */}
        <div className={styles.circle}></div>

        {/* Card */}
        <div className={styles.card__container}>
            <div>
                {/* Winner title */}
                {state.winnerStatus === 1 && (
                    <h2 className={styles.winner__title}>Winner!!</h2>
                )}

                {/* name */}
                <h1 className={styles.name}>{name}</h1>

                {/* Folio */}
                <h2 className={styles.folio}>{folio}</h2>
            </div>
        </div>

        {/* Participants and buttons */}
        <div className={styles.actions__container}>
            {/* participants number */}
            <div className={styles.icon__container}>
                <PersonRoundedIcon className={styles.person__icon} />
                <p className={styles.participants}>{participants.length ? participants.length : "0"}</p>
            </div>

            {/* action buttons */}
            {state.winnerStatus === 1 && (
                <div className={styles.buttons}>

                    {/* Replay deleting winner */}
                    <Tooltip title="Replay" placement="top">
                        <IconButton onClick={handleReplayClick}>
                            <ReplayCircleFilledRoundedIcon className={styles.icon} />
                        </IconButton>
                    </Tooltip>

                    {/* Do anothe raffle */}
                    <Tooltip title="Do another" placement="top">
                        <IconButton>
                            <ReplayCircleFilledRoundedIcon className={styles.icon} />
                        </IconButton>
                    </Tooltip>
                </div>    
            )}
            
        </div>
        
      </main>

    </div>
  )
}

export default Raffle;
