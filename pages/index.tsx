import type { NextPage } from 'next'

/* React */
import React, { useState } from 'react'

/* Components */
import Head from 'next/head'
import FileButton from '../components/FileButton'
import styles from '../styles/Home.module.css'

/* Redux */
import { 
  setDropDepth, 
  setInDropZone, 
} from "../redux/actions"
import { selectDropDepth } from "../redux/states/file/reducer"
import { useAppSelector, useAppDispatch } from '../redux/hooks'

/* Material UI */
import FileUploadRoundedIcon from '@mui/icons-material/FileUploadRounded';
import Snackbar from '@mui/material/Snackbar';
import MuiAlert, { AlertProps } from '@mui/material/Alert';


/* Papaparse */
import Papa from "papaparse";

const Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(
  props,
  ref,
) {
  return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});



const Home: NextPage = () => {

  const [file, setFile] = useState<File>();

  /* useState - upload */
  const [state, setState] = useState({
    fileName: "",
    loading: false,
    error: "",
    success: false,
    step: 0,
    open: false
  });


   /* Redux */
  const dispatch = useAppDispatch(); //function that allows to trigger actions that update the redux state
  /* redux - file */
  const dropDepth = useAppSelector(selectDropDepth) //function that allows to get the dropDepth from the redux state

  /* Functions - handle drag and drop */
  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();

    dispatch(setDropDepth(dropDepth + 1)); //increase drop depth
  };
  
  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();

    dispatch(setDropDepth(dropDepth - 1)); //decrease drop depth
    if(dropDepth > 0) return //if drop depth is greater than 0, do nothing
    dispatch(setInDropZone(false)); //set in drop zone to false
  };
  
  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();

    e.dataTransfer.dropEffect = 'copy'; //allows drop
    dispatch(setInDropZone(true)); //set in drop zone to true
  };
  
  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();

    let files = e.dataTransfer.files; //get files
  
    if (files && files.length > 0) {
      //const existingFiles = data.fileList.map(f => f.name)
      //files = files.filter(f => !existingFiles.includes(f.name))
      
      var file = files[0];
      console.log('file: ', file);

      //validate file
      if(file.type !== 'text/csv') {
        setState({
          ...state,
          error: 'Only CSV files are allowed',
          loading: false
        });
        console.log('error: ', 'Only CSV files are allowed');
        return;
      } else if(files.length > 1) {
        setState({
          ...state,
          error: 'Only one file is allowed',
          loading: false
        });
        console.log('error: ', 'Only one file is allowed');
        return;
      } else {
        e.dataTransfer.clearData(); //clear data
        dispatch(setDropDepth(0)); //reset drop depth to 0
        dispatch(setInDropZone(false)); //reset in drop zone to false

        setState({
          ...state,
          fileName: file.name,
          error: "",
          loading: true,
        });
        setFile(file);
      }
    }
  };

  /* Functions - handle file upload */
  const uploadFile = (e:any) => {
    console.log(e.target.files[0]);

    let files = e.target.files; //get files
    var file = files[0];

    //validate file
    if(file.type !== 'text/csv') {
      setState({
        ...state,
        error: 'Only CSV files are allowed',
        loading: false,
        open: true
      });
      return;
    } else {

      setState({
        ...state,
        fileName: file.name,
        error: "File uploaded",
        loading: true,
        open: true
      });
      setFile(file); //set file

      Papa.parse(file, {
        header: true,
        skipEmptyLines: true,
        //@ts-ignore
        complete: function (results) {
          console.log(results.data)
        },
      });
    }
  };


  /* Alert messages functions */

  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {
    if (reason === 'clickaway') {
      return;
    }

    setState({
      ...state,
      open: false,
      error: "",
    })
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.circle}></div>
        <div 
          className={styles.upload__drop}
          onDrop={e => handleDrop(e)}
          onDragOver={e => handleDragOver(e)}
          onDragEnter={e => handleDragEnter(e)}
          onDragLeave={e => handleDragLeave(e)}
        >
          <div>
            <h1 className={styles.title}>DRAG & DROP</h1>
            <p className={styles.text}>(CSV)</p>
          </div>
          <div>
            <FileUploadRoundedIcon className={styles.icon} />
          </div>
          <div>
            <FileButton uploadFile={uploadFile}/>
          </div>
        </div>
      </main>

      {/* alerts */}
       <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>
        <Alert onClose={handleClose} severity="error" sx={{ width: '100%' }}>
          {state.error}
        </Alert>
      </Snackbar>
    </div>
  )
}

export default Home
